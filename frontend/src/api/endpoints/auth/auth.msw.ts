/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Curotec AsPI
 * Curotec API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { LoginResponse, UserResponse } from "../../model";

export const getPostAuthRegisterResponseMock = (
  overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
  id: faker.helpers.arrayElement([
    faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  email: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostAuthLoginResponseMock = (
  overrideResponse: Partial<LoginResponse> = {},
): LoginResponse => ({
  token: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostAuthRegisterMockHandler = (
  overrideResponse?:
    | UserResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<UserResponse> | UserResponse),
) => {
  return http.post("*/auth/register", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostAuthRegisterResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostAuthLoginMockHandler = (
  overrideResponse?:
    | LoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginResponse> | LoginResponse),
) => {
  return http.post("*/auth/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostAuthLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getAuthMock = () => [
  getPostAuthRegisterMockHandler(),
  getPostAuthLoginMockHandler(),
];
