/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Curotec AsPI
 * Curotec API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  LoginRequest,
  LoginResponse,
  RegisterRequest,
  UserResponse,
} from "../../model";

import postAuthRegisterMutator from "../../mutator/custom-client";
import type { ErrorType as PostAuthRegisterErrorType } from "../../mutator/custom-client";
import postAuthLoginMutator from "../../mutator/custom-client";
import type { ErrorType as PostAuthLoginErrorType } from "../../mutator/custom-client";

/**
 * @summary Register a new user
 */
export const postAuthRegister = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return postAuthRegisterMutator<UserResponse>({
    url: `/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerRequest,
    signal,
  });
};

export const getPostAuthRegisterMutationOptions = <
  TError = PostAuthRegisterErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["postAuthRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRegister>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = RegisterRequest;
export type PostAuthRegisterMutationError = PostAuthRegisterErrorType<void>;

/**
 * @summary Register a new user
 */
export const usePostAuthRegister = <
  TError = PostAuthRegisterErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postAuthRegister>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Login an user
 */
export const postAuthLogin = (
  loginRequest: LoginRequest,
  signal?: AbortSignal,
) => {
  return postAuthLoginMutator<LoginResponse>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
    signal,
  });
};

export const getPostAuthLoginMutationOptions = <
  TError = PostAuthLoginErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = LoginRequest;
export type PostAuthLoginMutationError = PostAuthLoginErrorType<void>;

/**
 * @summary Login an user
 */
export const usePostAuthLogin = <
  TError = PostAuthLoginErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postAuthLogin>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
