/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Curotec AsPI
 * Curotec API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreatePostRequest,
  PostResponse,
  UpdatePostRequest,
} from "../../model";

import postPostsMutator from "../../mutator/custom-client";
import type { ErrorType as PostPostsErrorType } from "../../mutator/custom-client";
import getPostsMutator from "../../mutator/custom-client";
import type { ErrorType as GetPostsErrorType } from "../../mutator/custom-client";
import patchPostsIdMutator from "../../mutator/custom-client";
import type { ErrorType as PatchPostsIdErrorType } from "../../mutator/custom-client";
import deletePostsIdMutator from "../../mutator/custom-client";
import type { ErrorType as DeletePostsIdErrorType } from "../../mutator/custom-client";
import getPostsIdMutator from "../../mutator/custom-client";
import type { ErrorType as GetPostsIdErrorType } from "../../mutator/custom-client";

/**
 * @summary Create a new post
 */
export const postPosts = (
  createPostRequest: CreatePostRequest,
  signal?: AbortSignal,
) => {
  return postPostsMutator<PostResponse>({
    url: `/posts`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPostRequest,
    signal,
  });
};

export const getPostPostsMutationOptions = <
  TError = PostPostsErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPosts>>,
    TError,
    { data: CreatePostRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: CreatePostRequest },
  TContext
> => {
  const mutationKey = ["postPosts"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPosts>>,
    { data: CreatePostRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postPosts(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPosts>>
>;
export type PostPostsMutationBody = CreatePostRequest;
export type PostPostsMutationError = PostPostsErrorType<void>;

/**
 * @summary Create a new post
 */
export const usePostPosts = <
  TError = PostPostsErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPosts>>,
      TError,
      { data: CreatePostRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: CreatePostRequest },
  TContext
> => {
  const mutationOptions = getPostPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all posts
 */
export const getPosts = (signal?: AbortSignal) => {
  return getPostsMutator<PostResponse[]>({
    url: `/posts`,
    method: "GET",
    signal,
  });
};

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const;
};

export const getGetPostsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPosts>>>,
  TError = GetPostsErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts(signal);

  return {
    queryKey,
    queryFn,
    retry: 3,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsInfiniteQueryError = GetPostsErrorType<unknown>;

export function useGetPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPosts>>>,
  TError = GetPostsErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPosts>>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPosts>>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all posts
 */

export function useGetPostsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPosts>>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = GetPostsErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts(signal);

  return { queryKey, queryFn, retry: 3, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError = GetPostsErrorType<unknown>;

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = GetPostsErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all posts
 */

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = GetPostsErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a post by ID
 */
export const patchPostsId = (
  id: number,
  updatePostRequest: UpdatePostRequest,
) => {
  return patchPostsIdMutator<void>({
    url: `/posts/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updatePostRequest,
  });
};

export const getPatchPostsIdMutationOptions = <
  TError = PatchPostsIdErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPostsId>>,
    TError,
    { id: number; data: UpdatePostRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPostsId>>,
  TError,
  { id: number; data: UpdatePostRequest },
  TContext
> => {
  const mutationKey = ["patchPostsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPostsId>>,
    { id: number; data: UpdatePostRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchPostsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPostsId>>
>;
export type PatchPostsIdMutationBody = UpdatePostRequest;
export type PatchPostsIdMutationError = PatchPostsIdErrorType<void>;

/**
 * @summary Update a post by ID
 */
export const usePatchPostsId = <
  TError = PatchPostsIdErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchPostsId>>,
      TError,
      { id: number; data: UpdatePostRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchPostsId>>,
  TError,
  { id: number; data: UpdatePostRequest },
  TContext
> => {
  const mutationOptions = getPatchPostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a post by ID
 */
export const deletePostsId = (id: number) => {
  return deletePostsIdMutator<void>({ url: `/posts/${id}`, method: "DELETE" });
};

export const getDeletePostsIdMutationOptions = <
  TError = DeletePostsIdErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deletePostsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePostsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsId>>
>;

export type DeletePostsIdMutationError = DeletePostsIdErrorType<void>;

/**
 * @summary Delete a post by ID
 */
export const useDeletePostsId = <
  TError = DeletePostsIdErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsId>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeletePostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a post by ID
 */
export const getPostsId = (id: number, signal?: AbortSignal) => {
  return getPostsIdMutator<PostResponse>({
    url: `/posts/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetPostsIdQueryKey = (id: number) => {
  return [`/posts/${id}`] as const;
};

export const getGetPostsIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsId>>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = ({
    signal,
  }) => getPostsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    retry: 3,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getPostsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsId>>
>;
export type GetPostsIdInfiniteQueryError = GetPostsIdErrorType<void>;

export function useGetPostsIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsId>>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsId>>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsId>>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a post by ID
 */

export function useGetPostsIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getPostsId>>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getPostsId>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetPostsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = ({
    signal,
  }) => getPostsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    retry: 3,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsId>>
>;
export type GetPostsIdQueryError = GetPostsIdErrorType<void>;

export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a post by ID
 */

export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = GetPostsIdErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
