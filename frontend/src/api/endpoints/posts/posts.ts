/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Curotec AsPI
 * Curotec API Documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CreatePostRequest,
  PostResponse,
  UpdatePostRequest,
} from "../../model";

/**
 * @summary Create a new post
 */
export const postPosts = (
  createPostRequest: CreatePostRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostResponse>> => {
  return axios.default.post(`/posts`, createPostRequest, options);
};

export const getPostPostsMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPosts>>,
    TError,
    { data: CreatePostRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: CreatePostRequest },
  TContext
> => {
  const mutationKey = ["postPosts"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPosts>>,
    { data: CreatePostRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postPosts(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPosts>>
>;
export type PostPostsMutationBody = CreatePostRequest;
export type PostPostsMutationError = AxiosError<void>;

/**
 * @summary Create a new post
 */
export const usePostPosts = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPosts>>,
      TError,
      { data: CreatePostRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: CreatePostRequest },
  TContext
> => {
  const mutationOptions = getPostPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all posts
 */
export const getPosts = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostResponse[]>> => {
  return axios.default.get(`/posts`, options);
};

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError = AxiosError<unknown>;

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all posts
 */

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a post by ID
 */
export const patchPostsId = (
  id: string,
  updatePostRequest: UpdatePostRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostResponse>> => {
  return axios.default.patch(`/posts/${id}`, updatePostRequest, options);
};

export const getPatchPostsIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchPostsId>>,
    TError,
    { id: string; data: UpdatePostRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchPostsId>>,
  TError,
  { id: string; data: UpdatePostRequest },
  TContext
> => {
  const mutationKey = ["patchPostsId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchPostsId>>,
    { id: string; data: UpdatePostRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchPostsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchPostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchPostsId>>
>;
export type PatchPostsIdMutationBody = UpdatePostRequest;
export type PatchPostsIdMutationError = AxiosError<void>;

/**
 * @summary Update a post by ID
 */
export const usePatchPostsId = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof patchPostsId>>,
      TError,
      { id: string; data: UpdatePostRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof patchPostsId>>,
  TError,
  { id: string; data: UpdatePostRequest },
  TContext
> => {
  const mutationOptions = getPatchPostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a post by ID
 */
export const deletePostsId = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/posts/${id}`, options);
};

export const getDeletePostsIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsId>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deletePostsId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deletePostsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsId>>
>;

export type DeletePostsIdMutationError = AxiosError<void>;

/**
 * @summary Delete a post by ID
 */
export const useDeletePostsId = <TError = AxiosError<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsId>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeletePostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get a post by ID
 */
export const getPostsId = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostResponse>> => {
  return axios.default.get(`/posts/${id}`, options);
};

export const getGetPostsIdQueryKey = (id: string) => {
  return [`/posts/${id}`] as const;
};

export const getGetPostsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = AxiosError<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = ({
    signal,
  }) => getPostsId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPostsId>>
>;
export type GetPostsIdQueryError = AxiosError<void>;

export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = AxiosError<void>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = AxiosError<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = AxiosError<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a post by ID
 */

export function useGetPostsId<
  TData = Awaited<ReturnType<typeof getPostsId>>,
  TError = AxiosError<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
